{"version":3,"sources":["logo.svg","Components/Table/Table.jsx","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","Table","props","getRecord","id","state","tableData","find","_id","readOnlyFlag","editFlag","rowId","idS","nameS","ageS","phoneS","emailS","e","preventDefault","form","target","age","elements","value","name","requestOptions","method","headers","body","JSON","stringify","data","phone","email","fetch","then","response","a","json","ok","error","message","status","Promise","reject","newCoctailInfo","setState","console","log","catch","item","newItenDelet","this","filter","val","savedRecord","curValId","curValName","curValAge","curValPhone","curValEmail","innerText","style","curStr","upRowId","indexOf","newUpdateData","i","length","push","__v","res","result","tableDataC","className","onSubmit","addNewCoctail","type","placeholder","scope","map","key","defaultValue","readOnly","onClick","updateTable","deletRowTable","onChange","getId","getName","getAge","getPhone","getEmail","Component","App","src","logo","alt","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller"],"mappings":"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","file":"static/js/main.f4f32444.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\nexport default class Table extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: [],\r\n            readOnlyFlag: true,\r\n            editFlag: false,\r\n            rowId: '',\r\n            idS: '',\r\n            nameS: '',\r\n            ageS: '',\r\n            phoneS: '',\r\n            emailS: ''\r\n        };\r\n    }\r\n\r\n    addNewCoctail(e) {\r\n        e.preventDefault();\r\n        \r\n        const form = e.target;\r\n        const age = form.elements[\"age\"].value;\r\n        const name = form.elements[\"name\"].value;\r\n\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify( {data: { id: '', name: name, age: age, phone: '', email: '' }})\r\n        };\r\n        fetch('http://178.128.196.163:3000/api/records', requestOptions)\r\n            .then(async response => {\r\n                const data = await response.json();\r\n\r\n                if (!response.ok) {\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                } else {\r\n                    let newCoctailInfo = {data: {  id: '', name: name, age: age, phone: '', email: '' }};\r\n                    this.setState({\r\n                        tableData: [...this.state.tableData, newCoctailInfo]\r\n                    });\r\n                    console.log(`New State, add method:`);\r\n                    console.log(this.state.tableData);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n    }\r\n\r\n    deletRowTable(item) {\r\n        const newItenDelet = this.state.tableData.filter(tableData => {\r\n            return tableData !== item;\r\n        });\r\n\r\n        fetch('http://178.128.196.163:3000/api/records/'+item._id , { method: 'DELETE' })\r\n        .then(async response => {\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            } else {\r\n                this.setState({\r\n                    tableData: [...newItenDelet]\r\n                });\r\n                console.log(\"New State, delete method\");\r\n                console.log(this.state.tableData);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('There was an error!', error);\r\n        });\r\n    }\r\n\r\n    getRecord = (id) => {\r\n        const tableItem = this.state.tableData.find(tableData => tableData._id === id);\r\n        return tableItem; \r\n    }\r\n\r\n    getId(val){\r\n        return this.setState({\r\n            idS: val\r\n        });\r\n    }\r\n    getName(val){\r\n        return this.setState({\r\n            nameS: val\r\n        });\r\n    }\r\n    getAge(val){\r\n        return this.setState({\r\n            ageS: val\r\n        });\r\n    }\r\n    getPhone(val){\r\n        return this.setState({\r\n            phoneS: val\r\n        });\r\n    }\r\n    getEmail(val){\r\n        return this.setState({\r\n            emailS: val\r\n        });\r\n    }\r\n\r\n    updateTable(item, e) {\r\n        let editFlag = this.state.editFlag;\r\n\r\n        const savedRecord = this.state.tableData;\r\n\r\n        let curValId = item.data.id;\r\n        let curValName = item.data.name;\r\n        let curValAge = item.data.age;\r\n        let curValPhone = item.data.phone;\r\n        let curValEmail = item.data.email;\r\n\r\n        if(this.state.idS !== curValId) {\r\n            this.setState({idS: curValId})\r\n        }\r\n        if(this.state.nameS !== curValName) {\r\n            this.setState({nameS: curValName})\r\n        }\r\n        if(this.state.ageS !== curValAge) {\r\n            this.setState({ageS: curValAge})\r\n        }\r\n        if(this.state.phoneS !== curValPhone) {\r\n            this.setState({phoneS: curValPhone})\r\n        }\r\n        if(this.state.emailS !== curValEmail) {\r\n            this.setState({emailS: curValEmail})\r\n        }\r\n        \r\n        if(editFlag) {\r\n\r\n            e.target.innerText = '✎';\r\n            e.target.style = ` background-color: #0d9bcb`;\r\n\r\n            let id = this.state.idS;\r\n            let name = this.state.nameS;\r\n            let age = this.state.ageS;\r\n            let phone = this.state.phoneS;\r\n            let email = this.state.emailS;\r\n\r\n            let curStr = {data: { id: id, name: name, age: age, phone: phone, email: email}};\r\n\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify( curStr )\r\n            };\r\n            fetch('http://178.128.196.163:3000/api/records/'+item._id , requestOptions)\r\n            .then(async response => {\r\n                const data = await response.json();\r\n\r\n                if (!response.ok) {\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                } else {\r\n                    let upRowId = savedRecord.indexOf(this.getRecord(item._id));\r\n                    const newUpdateData = [];\r\n                    for(let i = 0; i < savedRecord.length; i++) {\r\n                        if (i === upRowId){\r\n                            newUpdateData.push({_id: savedRecord[i]._id, data: {id: curStr.data.id, name: curStr.data.name, age: curStr.data.age, phone: curStr.data.phone, email: curStr.data.email}, __v: 0});\r\n                        } else {\r\n                            newUpdateData.push(savedRecord[i]);\r\n                        }\r\n                    }\r\n\r\n                    this.setState({\r\n                        readOnlyFlag: true,\r\n                        editFlag: false,\r\n                        tableData: [...newUpdateData]\r\n                    });\r\n                    console.log(\"New State, update method\");\r\n                    console.log(this.state.tableData);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n        } else {\r\n\r\n            e.target.innerText = '✔';\r\n            e.target.style = \"background-color: #48b398\";\r\n\r\n            this.setState({\r\n                readOnlyFlag: false,\r\n                editFlag: true,\r\n                rowId: item._id,\r\n            });\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://178.128.196.163:3000/api/records\")\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              this.setState({\r\n                tableData: result\r\n              })\r\n            },\r\n            (error) => {\r\n              console.log(error)\r\n            }\r\n          )\r\n      }\r\n\r\n    render() {\r\n\r\n        const tableDataC = this.state.tableData;\r\n        let readOnlyFlag = this.state.readOnlyFlag;\r\n        const rowId = this.state.rowId;\r\n        const editFlag = this.state.editFlag\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n            <form className=\"addNewItemForm\" onSubmit={ (e) => {this.addNewCoctail(e)} }>\r\n                <input type=\"text\" id=\"name\" className='test-iput' placeholder='Name' />\r\n                <input type=\"text\" id=\"age\" className='test-iput' placeholder='Age' />\r\n                <button className=\"btn\" value=\"Добавить\">Добавить</button>\r\n            </form>\r\n            \r\n            \r\n            <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th scope=\"col\">id</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Age</th>\r\n                        <th scope=\"col\">Phone</th>\r\n                        <th scope=\"col\">Email</th>\r\n                        <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { tableDataC.map((item, i) => {\r\n                        if (editFlag && !readOnlyFlag) {\r\n                            if (item._id === rowId) {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <th scope=\"row\"> <input className='test-input' onChange={ (e) => this.getId(e.target.value, item)} defaultValue={item.data.id} readOnly={this.state.readOnlyFlag} /></th>\r\n                                        <td> <input className='test-input' onChange={ (e) => this.getName(e.target.value, item)} defaultValue={item.data.name} readOnly={this.state.readOnlyFlag} /></td>\r\n                                        <td> <input className='test-input' onChange={ (e) => this.getAge(e.target.value, item)} defaultValue={item.data.age} readOnly={this.state.readOnlyFlag} /></td>\r\n                                        <td> <input className='test-input' onChange={ (e) => this.getPhone(e.target.value, item)} defaultValue={item.data.phone} readOnly={this.state.readOnlyFlag} /></td>\r\n                                        <td> <input className='test-input' onChange={ (e) => this.getEmail(e.target.value, item)} defaultValue={item.data.email} readOnly={this.state.readOnlyFlag} /></td>\r\n                                        <td><button className=\"btn-update\" onClick={(e) => this.updateTable(item, e)} type=\"button\">✎</button> <button className=\"btn-delete\" id=\"delete\" onClick={(e) => this.deletRowTable(item)} type=\"button\">×</button></td>\r\n                                    </tr>\r\n                                ) \r\n                            } \r\n                        } else {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <th scope=\"row\"> <input className='test-input' defaultValue={item.data.id} readOnly={this.state.readOnlyFlag} /></th>\r\n                                    <td> <input className='test-input' defaultValue={item.data.name} readOnly={this.state.readOnlyFlag} /></td>\r\n                                    <td> <input className='test-input' defaultValue={item.data.age} readOnly={this.state.readOnlyFlag} /></td>\r\n                                    <td> <input className='test-input' defaultValue={item.data.phone} readOnly={this.state.readOnlyFlag} /></td>\r\n                                    <td> <input className='test-input' defaultValue={item.data.email} readOnly={this.state.readOnlyFlag} /></td>\r\n                                    <td><button className=\"btn-update\" onClick={(e) => this.updateTable(item, e)} type=\"button\">✎</button> <button className=\"btn-delete\" id=\"delete\" onClick={(e) => this.deletRowTable(item)} type=\"button\">×</button></td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n            </div>\r\n\r\n        )\r\n    } \r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport  Table from './Components/Table/Table';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h2>Welcome to React</h2>\r\n        </div>\r\n        <p className=\"App-intro\">\r\n          To get started, edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <div className=\"table-container\">\r\n          <Table />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}